{"ast":null,"code":"// client/src/services/api.js\nimport axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Handle token expiration\napi.interceptors.response.use(response => response, error => {\n  // Handle 401 Unauthorized errors (expired or invalid token)\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('token');\n\n    // Redirect to login page if the app is in the browser environment\n    if (typeof window !== 'undefined') {\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;\n\n// client/src/utils/formatter.js\n// Helper functions for formatting data\n\n/**\r\n * Format experience percentage\r\n * @param {number} experience - Current experience points\r\n * @param {number} level - Current level\r\n * @returns {number} - Percentage of progress to next level (0-100)\r\n */\nexport const formatExpPercentage = (experience, level) => {\n  const requiredXP = level * 1000;\n  return Math.min(Math.floor(experience / requiredXP * 100), 100);\n};\n\n/**\r\n * Format experience display text\r\n * @param {number} experience - Current experience points\r\n * @param {number} level - Current level\r\n * @returns {string} - Formatted text (e.g. \"350/1000 XP\")\r\n */\nexport const formatExpText = (experience, level) => {\n  const requiredXP = level * 1000;\n  return `${experience}/${requiredXP} XP`;\n};\n\n/**\r\n * Generate share URL\r\n * @param {string} userId - User ID\r\n * @param {number} level - User level\r\n * @param {object} stats - User stats object\r\n * @returns {string} - Share URL\r\n */\nexport const generateShareUrl = (userId, level, stats) => {\n  if (!stats) return '';\n  const randomId = Math.random().toString(36).substring(2, 8);\n  const statValues = [stats.strength, stats.agility, stats.intelligence, stats.endurance, stats.vitality, stats.perception, stats.willpower, stats.charisma].join(',');\n  return `${window.location.origin}/share/${randomId}?l=${level}&s=${statValues}`;\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","removeItem","window","location","href","formatExpPercentage","experience","level","requiredXP","Math","min","floor","formatExpText","generateShareUrl","userId","stats","randomId","random","toString","substring","statValues","strength","agility","intelligence","endurance","vitality","perception","willpower","charisma","join","origin"],"sources":["C:/Users/Yuta Okkotsu/OneDrive/Desktop/System/client/src/services/api.js"],"sourcesContent":["// client/src/services/api.js\r\nimport axios from 'axios';\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Add auth token to requests\r\napi.interceptors.request.use(\r\n  config => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['x-auth-token'] = token;\r\n    }\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Handle token expiration\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    // Handle 401 Unauthorized errors (expired or invalid token)\r\n    if (error.response && error.response.status === 401) {\r\n      localStorage.removeItem('token');\r\n      \r\n      // Redirect to login page if the app is in the browser environment\r\n      if (typeof window !== 'undefined') {\r\n        window.location.href = '/login';\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n\r\n// client/src/utils/formatter.js\r\n// Helper functions for formatting data\r\n\r\n/**\r\n * Format experience percentage\r\n * @param {number} experience - Current experience points\r\n * @param {number} level - Current level\r\n * @returns {number} - Percentage of progress to next level (0-100)\r\n */\r\nexport const formatExpPercentage = (experience, level) => {\r\n  const requiredXP = level * 1000;\r\n  return Math.min(Math.floor((experience / requiredXP) * 100), 100);\r\n};\r\n\r\n/**\r\n * Format experience display text\r\n * @param {number} experience - Current experience points\r\n * @param {number} level - Current level\r\n * @returns {string} - Formatted text (e.g. \"350/1000 XP\")\r\n */\r\nexport const formatExpText = (experience, level) => {\r\n  const requiredXP = level * 1000;\r\n  return `${experience}/${requiredXP} XP`;\r\n};\r\n\r\n/**\r\n * Generate share URL\r\n * @param {string} userId - User ID\r\n * @param {number} level - User level\r\n * @param {object} stats - User stats object\r\n * @returns {string} - Share URL\r\n */\r\nexport const generateShareUrl = (userId, level, stats) => {\r\n  if (!stats) return '';\r\n  \r\n  const randomId = Math.random().toString(36).substring(2, 8);\r\n  const statValues = [\r\n    stats.strength,\r\n    stats.agility,\r\n    stats.intelligence,\r\n    stats.endurance,\r\n    stats.vitality,\r\n    stats.perception,\r\n    stats.willpower,\r\n    stats.charisma\r\n  ].join(',');\r\n  \r\n  return `${window.location.origin}/share/${randomId}?l=${level}&s=${statValues}`;\r\n};\r\n\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;EACrEC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAI;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,cAAc,CAAC,GAAGK,KAAK;EACxC;EACA,OAAOD,MAAM;AACf,CAAC,EACDI,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,GAAG,CAACO,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC3BQ,QAAQ,IAAIA,QAAQ,EACpBH,KAAK,IAAI;EACP;EACA,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnDN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;;IAEhC;IACA,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;MACjCA,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;EACF;EACA,OAAOP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,GAAG;;AAElB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMuB,mBAAmB,GAAGA,CAACC,UAAU,EAAEC,KAAK,KAAK;EACxD,MAAMC,UAAU,GAAGD,KAAK,GAAG,IAAI;EAC/B,OAAOE,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,KAAK,CAAEL,UAAU,GAAGE,UAAU,GAAI,GAAG,CAAC,EAAE,GAAG,CAAC;AACnE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,aAAa,GAAGA,CAACN,UAAU,EAAEC,KAAK,KAAK;EAClD,MAAMC,UAAU,GAAGD,KAAK,GAAG,IAAI;EAC/B,OAAO,GAAGD,UAAU,IAAIE,UAAU,KAAK;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,gBAAgB,GAAGA,CAACC,MAAM,EAAEP,KAAK,EAAEQ,KAAK,KAAK;EACxD,IAAI,CAACA,KAAK,EAAE,OAAO,EAAE;EAErB,MAAMC,QAAQ,GAAGP,IAAI,CAACQ,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;EAC3D,MAAMC,UAAU,GAAG,CACjBL,KAAK,CAACM,QAAQ,EACdN,KAAK,CAACO,OAAO,EACbP,KAAK,CAACQ,YAAY,EAClBR,KAAK,CAACS,SAAS,EACfT,KAAK,CAACU,QAAQ,EACdV,KAAK,CAACW,UAAU,EAChBX,KAAK,CAACY,SAAS,EACfZ,KAAK,CAACa,QAAQ,CACf,CAACC,IAAI,CAAC,GAAG,CAAC;EAEX,OAAO,GAAG3B,MAAM,CAACC,QAAQ,CAAC2B,MAAM,UAAUd,QAAQ,MAAMT,KAAK,MAAMa,UAAU,EAAE;AACjF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}